I would like you to use the files provided to rewrite a generalized version of the CrAnData (and later module, dataset and dataloader) where every array has its axes named and we don't rely on forcing the [obs,var,...] axes. Instead of having stereotyped ordering and a fixed [obs,var, etc] structure, in AnnDataModule/MetaAnnDataModule, specify what the global order of all the axes should be, and order the axes of the arrays to follow this convention (and leave unnamed axes in the same order at the end). The class should also dynamically create the properties and setters like we previously had for .obs and .var, so that this structure will work with all associated code in the same way once the object is created. Ideally this will also cut down on boilerplate, since you should add a parameter for whether a property will be converted to a dataframe, which was the only atypical property (and these will be handled like you were doing with obs and var).

We should be able to initialize or CrAnData backed file with empty arrays, so that domain specific applications like writing them in a streamed manner is possible afterwards. Or if arrays are provided (sparse row-major or dense), they can be written directly with an option to specify the chunk sizes along each dimension quite similar to what we have currently. 

Ideally, by writing this code to be maximally general, it will be more succinct and elegant. 

We should rely on the same types of utilities I have so far so that we can lazy load our arrays from the disk by their file and chunk, fill missing indices with nans (on axes of variable size, like obs is in our application here), collate, shuffle and convert to tensors on device. This should make it easy to also return tensors of customized axes ordering, where we'll usually want the batch dimension first for broadcasting purposes and can align other indices after that.


Once we have this, we will proceed to modifying the other modules to use this generalized CrAnData.

When we get to the dataloader, axis 0 will be the batched axis, and sample the first occurrance of that axis from each tensor with that axis. Then you should also be able to specify which axes to shuffle, and apply the same shuffle order to all the arrays on that axis. Remember that the lazy loading batches in chunks is also important, because otherwise it is extremely slow.

Make sequence loading more efficient by storing the sequences within the h5ad as all the other data have been stored (either as a onehot of uint8 or chars (to convert to onehot), whichever is more efficient).

We will also give an option to shuffle 